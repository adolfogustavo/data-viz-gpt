import Head from 'next/head'
import { useState, useRef } from 'react'
import { Inter } from '@next/font/google'
import styles from '../styles/Home.module.scss'
import { className } from '../utils/className'
import { BsFillTrashFill, BsFillCaretRightFill } from "react-icons/bs"
import readXlsxFile from "read-excel-file"
import { strDataSetToArr } from "../utils/arrays"
import { mockedAPIResponseLong } from "../utils/mockedData";
import Charts from '../components/view/charts'

const inter = Inter({ subsets: ['cyrillic'] })

export default function Home() {
  const [data, setData] = useState<string | any>("");
  const [isAnalyzing, setIsAnalyzing] = useState<boolean>(false);
  const [chartTypesList, setChartTypesList] = useState([]);

  // TextArea methods
  const handleChangeData = (e: React.FormEvent<HTMLTextAreaElement>) => {
    setData(e.currentTarget.value)
  }
  const pasteDataFromClipboard = async () => {
    const clipBoardData = await navigator.clipboard.readText();
    setData(clipBoardData);
  }

  // Upload data logic & methods
  const uploadDataInput = useRef<HTMLInputElement>(null); // Reference of the HTML input to select the file from another place later
  const selectUploadDataInput = () => uploadDataInput.current?.click();

  const processingUploadedData = (e: React.FormEvent<HTMLInputElement>) => {
    e.preventDefault();
    const fileReader = new FileReader();
    let currentFile;
    let currentFileName;
    let currentFileType;
  
    if (e.currentTarget.files) {
      currentFile = e.currentTarget.files[0];
      currentFileName = currentFile?.name;
      currentFileType = currentFileName?.split(".")[1];

      if (currentFileType === "csv") {
        fileReader.onload = async (event) => {
          let csvOutputString = event.target?.result;
          if (csvOutputString) setData(csvOutputString);
        }
        fileReader.readAsText(currentFile)
      } else if (currentFileType === "xlsx") {
        readXlsxFile(currentFile).then((rows) => {
          const xlsxOutputString = rows.join("\n");
          setData(xlsxOutputString);
        })
      }
    }
  }

  const cleanData = (e: React.FormEvent<HTMLButtonElement>) => {
    e.preventDefault();
    setData("");
  }

  // Analyze data: Crop data to call APIs (First 2 rows)
  const analyzeData = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsAnalyzing(true);
    const convertedData = strDataSetToArr(data);

    const [dataHeader, [dataFirstRow]] = convertedData;
    const shorterDataForAIToAnalyze = 
      dataHeader.join(",").concat("\n", dataFirstRow); // => Dataset header and first row.

    // console.log("shorterDataForAIToAnalyze ==>", shorterDataForAIToAnalyze)

    // Get Instructions to build graphic based on data
    // const openAIResp = await fetch("/api/generate", {
    //   method: "POST",
    //   headers: {
    //     "Content-Type": "application/json",
    //   },
    //   body: JSON.stringify({
    //     data: shorterDataForAIToAnalyze,
    //   }),
    // });
    
    // const AIResponse = await openAIResp.json(),
    const AIResponse = mockedAPIResponseLong,
          sliceFrom = AIResponse.indexOf("["),
          sliceTo = AIResponse.lastIndexOf("]") + 1,
          chartTypesList = JSON.parse(AIResponse.slice(sliceFrom, sliceTo));

    setChartTypesList(chartTypesList);
    setIsAnalyzing(false);
  }


  return (
    <>
      <Head>
        <title>Data Viz with GPT-3</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.leftColumn}>
          <h1 className={inter.className}>Welcome</h1>
          <h3 className={inter.className}>Paste or upload your dataset and start analyzing it</h3>
          <form onSubmit={analyzeData}>
            <div className={styles.buttonsContainer}>
              <div className={styles.buttonBox}>
                <input type="button" className={styles.loadDataButton} onClick={pasteDataFromClipboard} value="Paste Data"/>
              </div>
              <div className={styles.buttonBox}>
                <input
                  type="button"
                  className={styles.loadDataButton}
                  onClick={selectUploadDataInput}
                  value="Upload Data"
                />
              </div>
              <div className={styles.buttonBox}>
                <button className={styles.clearButton} onClick={cleanData}>
                  <BsFillTrashFill className={styles.clearIconBtn}/>
                  <span>Clear</span>
                </button>
              </div>
              <div className={className(styles.buttonBox, styles.alignRight)}>
                <input type="submit" className={styles.analyzeDataButton} value="Analyze" />
              </div>
            </div>
            <input
              type="file"
              style={{ display: "none" }}
              id="file"
              accept=".xlsx,.csv"
              onChange={processingUploadedData}
              ref={uploadDataInput}
            />
            <p className={className(inter.className, styles.dataSubtitle)}>Your data</p>
            <textarea className={styles.txtData} value={data} onChange={handleChangeData} />
          </form>
        </div>
        <div className={styles.rightColumn}>
          <p className={className(inter.className, styles.dataSubtitle)}>Charts</p>
          <Charts chartTypesList={chartTypesList} data={data}/>
          <p>{ isAnalyzing && 'Loading...'}</p>
        </div>
      </main>
    </>
  )
}
